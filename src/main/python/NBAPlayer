import loaders.twitter_handle_loader as thl
import loaders.nba_data_loader as sl
import loaders.twitter_data_loader as tdl
import cleansers.twitter_data_cleaner as tdc
import cleansers.nba_data_cleanser as ndc


class NBAPlayer:
    allPlayers = {}

    def __new__(cls, name, *args, **kwargs):
        """
        Only used for cache maintenance. Called before init.
        The super in here I believe refers to __init__
        """
        if name in cls.allPlayers.keys():
            return cls.allPlayers[name]
        player = super(NBAPlayer, cls).__new__(cls)
        return player

    def __init__(self, name: str):
        """
        Creates the NBAPlayer object.

        @param name: The player's first and last name as a single string with correct capitalization.
        @type name: str
        """
        if name in NBAPlayer.allPlayers.keys():
            return
        self.name = name
        self.handle = thl.getTwitterHandle(self.name)
        self.plusMinus, self.avgPoints, self.avgAcc = getEverySeasonStats(self.name)
        self.tweets = getAllTweetsDuringSeasons(self.handle)
        NBAPlayer.allPlayers[name] = self


def getEverySeasonStats(name: str):
    """
    @param name: The player's name.
    @return: A dictionary where the key is the year and the value is dataframe for
    all the stats in that year.
    @rtype: dictionary
    """
    statDict = {}
    avgPointsDict = {}
    avgAccDict = {}
    for year in sl.getNBASeasonRanges():
        dirtyStats = sl.getPlayerSeasonalGameStats(name, int(year))
        statDict[year], avgPointsDict[year], avgAccDict = ndc.cleanNBAData(dirtyStats)
    return statDict, avgPointsDict, avgAccDict


def getAllTweetsDuringSeasons(handle: str):
    """
    @param handle: The player's twitter handle.
    @return: A dictionary where the key is the year and the value is a dataframe for
    all the tweets in that year.
    @rtype: dictionary
    """
    tweetsDict = {}
    allSeasons = sl.getNBASeasonRanges()
    for year in allSeasons:
        dateRange = allSeasons[year]
        startDate = dateRange[0]
        endDate = dateRange[1]
        dirtyTweets = tdl.getPlayerTweetsAsDF(handle, startDate, endDate)
        tweetsDict[year] = tdc.cleanTweets(dirtyTweets)
    return tweetsDict


# Test Code - cache works
# lebron = NBAPlayer('LeBron James')
# print(lebron.name, ":", lebron.handle)
# print(NBAPlayer.allPlayers)
# lebron2 = NBAPlayer('LeBron James')
# print(NBAPlayer.allPlayers)
# harden = NBAPlayer('James Harden')
# print(NBAPlayer.allPlayers)

# Test Code - view stats and tweets
# lebron = NBAPlayer('LeBron James')
# print(NBAPlayer.allPlayers[lebron.name].plusMinus['2018'])
# print(NBAPlayer.allPlayers[lebron.name].tweets['2018'])
# harden = NBAPlayer('James Harden')
# print(NBAPlayer.allPlayers[harden.name].plusMinus['2018'])
# print(NBAPlayer.allPlayers[harden.name].tweets['2018'])
