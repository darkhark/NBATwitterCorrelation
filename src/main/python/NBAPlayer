import loaders.twitter_handle_loader as thl
import loaders.nba_data_loader as sl
import loaders.twitter_data_loader as tdl
import cleansers.twitter_data_cleaner as tdc


class NBAPlayer:
    # TODO: Create a private constructor so one player can be called multiple times in a session
    #  without recreating the player object.
    def __init__(self, name: str):
        """
        Creates the NBAPlayer object.

        @param name: The player's first and last name as a single string with correct capitalization.
        @type name: str
        """
        self.name = name
        self.handle = thl.getTwitterHandle(self.name)
        self.stats = getEverySeasonStats(self.name)
        self.tweets = getAllTweetsDuringSeasons(self.handle)


def getEverySeasonStats(name: str):
    """
    @param name: The player's name.
    @return: A dictionary where the key is the year and the value is dataframe for
    all the stats in that year.
    @rtype: dictionary
    """
    # TODO: Once nba_data_cleaner is done, clean the stats before adding them to the dict.
    #  Look at getAllTweetsDuringSeason as reference.
    statDict = {}
    for year in sl.getNBASeasonRanges():
        statDict[year] = sl.getPlayerSeasonalGameStats(name, int(year))
    return statDict


def getAllTweetsDuringSeasons(handle: str):
    """
    @param handle: The player's twitter handle.
    @return: A dictionary where the key is the year and the value is a dataframe for
    all the tweets in that year.
    @rtype: dictionary
    """
    tweetsDict = {}
    allSeasons = sl.getNBASeasonRanges()
    for year in allSeasons:
        dateRange = allSeasons[year]
        startDate = dateRange[0]
        endDate = dateRange[1]
        dirtyTweets = tdl.getPlayerTweetsAsDF(handle, startDate, endDate)
        tweetsDict[year] = tdc.cleanTweets(dirtyTweets)
    return tweetsDict

# Test Code
# lebron = NBAPlayer('LeBron James')
# print(lebron.name, ":", lebron.handle)
