import loaders.twitter_handle_loader as thl
import loaders.nba_data_loader as ndl
import loaders.twitter_data_loader as tdl
import cleansers.twitter_data_cleaner as tdc
import cleansers.nba_data_cleanser as ndc

import pandas as pd


class NBAPlayer:
    allPlayers = {}

    def __new__(cls, name, *args, **kwargs):
        """
        Only used for cache maintenance. Called before init.
        The super in here I believe refers to __init__
        """
        if name in cls.allPlayers.keys():
            return cls.allPlayers[name]
        player = super(NBAPlayer, cls).__new__(cls)
        return player

    def __init__(self, name: str):
        """
        Creates the NBAPlayer object.

        @param name: The player's first and last name as a single string with correct capitalization.
        @type name: str
        """
        if name in NBAPlayer.allPlayers.keys():
            return
        self.name = name
        self.handle = thl.getTwitterHandle(self.name)
        self.plusMinus, self.avgPoints, self.avgAcc = self.getEverySeasonStats()
        self.tweets = self.getEverySeasonTweets()
        NBAPlayer.allPlayers[name] = self

    def getEverySeasonStats(self):
        """
        @param name: The player's name.
        @return: A dictionary where the key is the year and the value is dataframe for
        all the stats in that year.
        @rtype: dictionary
        """
        statDict = {}
        avgPointsDict = {}
        avgAccDict = {}
        for year in ndl.getNBASeasonRanges():
            dirtyStats = ndl.getPlayerSeasonalGameStats(self.name, int(year))
            statDict[year], avgPointsDict[year], avgAccDict = ndc.cleanNBAData(dirtyStats)
        return statDict, avgPointsDict, avgAccDict

    def getEverySeasonTweets(self):
        """
        @return: A dictionary where the key is the year and the value is a dataframe for
        all the tweets in that year.
        @rtype: dictionary
        """
        tweetsDict = {}
        allSeasons = ndl.getNBASeasonRanges()
        for year in allSeasons:
            dateRange = allSeasons[year]
            startDate = dateRange[0]
            endDate = dateRange[1]
            dirtyTweets = tdl.getPlayerTweetsAsDF(self.handle, startDate, endDate)
            tweetsDict[year] = tdc.cleanTweets(dirtyTweets)
        return tweetsDict

    def getAllStatsAndTweetsDF(self):
        """
        Merges the tweets and stats data for every year for this player.
        @return:
        @rtype:
        """
        bigDF = pd.DataFrame()
        for year in self.plusMinus.keys():
            bigDF.append(self.getStatsAndTweetsDF(year))
        return bigDF

    def getStatsAndTweetsDF(self, year):
        """
        Merges the stats and tweets DFs for the given year

        @param year: The NBA season to merge the DFs for.
        @return: A dataframe consisting of the following columns: TweetID, Date, Tweet,
        @rtype:
        """
        year = str(year)
        tweetsDF = self.tweets[year]
        statsDF = self.plusMinus[year]
        mergedDF = pd.merge(left=tweetsDF, right=statsDF, left_on='TweetDate', right_on='GAME_DATE', how='outer')
        return mergedDF

# def getAllStatsAndTweetsAllPlayers()


pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
# Test Code - cache works
# lebron = NBAPlayer('LeBron James')
# print(lebron.name, ":", lebron.handle)
# print(NBAPlayer.allPlayers)
# lebron2 = NBAPlayer('LeBron James')
# print(NBAPlayer.allPlayers)
# harden = NBAPlayer('James Harden')
# print(NBAPlayer.allPlayers)

# Test Code - view stats and tweets separate
# lebron = NBAPlayer('LeBron James')
# print(NBAPlayer.allPlayers[lebron.name].plusMinus['2018'])
# print(NBAPlayer.allPlayers[lebron.name].tweets['2018'])

# Test Code - merge tweets and stats
lebron = NBAPlayer('LeBron James')
print(lebron.getStatsAndTweetsDF(2018))
